generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model appointments {
  id                     Int                 @id @default(autoincrement())
  appointment_time_start DateTime            @db.Timestamp(6)
  appointment_time_end   DateTime            @db.Timestamp(6)
  customer_id            Int?
  barber_id              Int?
  shop_id                Int?
  created_at             DateTime?           @default(now()) @db.Timestamp(6)
  updated_at             DateTime?           @db.Timestamp(6)
  haircut_type           haircut_type_enum[] @default([Haircut])
  barbers                barbers?            @relation(fields: [barber_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  customers              customers?          @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  barbershops            barbershops?        @relation(fields: [shop_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([appointment_time_start, shop_id])
}
//barbers and managers
model barbers {
  id                                          Int                   @id @default(autoincrement())
  name                                        String                @unique @db.VarChar(100)
  email                                       String                @unique @db.VarChar(100)
  created_at                                  DateTime?             @default(now()) @db.Timestamp(6)
  updated_at                                  DateTime?             @db.Timestamp(6)
  phone_number                                String?               @db.VarChar
  appointments                                appointments[]
  barbershops_barbershops_manager_idTobarbers barbershops[]         @relation("barbershops_manager_idTobarbers")
  barbervsbarbershops                         barbervsbarbershops[]
}

model barbershops {
  id                                      Int                   @id @default(autoincrement())
  name                                    String                @db.VarChar(100)
  address                                 String                @unique @db.VarChar(255)
  city                                    String                @db.VarChar(50)
  phone_number                            String?               @db.VarChar(20)
  created_at                              DateTime?             @default(now()) @db.Timestamp(6)
  updated_at                              DateTime?             @db.Timestamp(6)
  opening_hours                           Json
  manager_id                              Int?
  appointments                            appointments[]
  barbers_barbershops_manager_idTobarbers barbers?              @relation("barbershops_manager_idTobarbers", fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  barbervsbarbershops                     barbervsbarbershops[]
}

model customers {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  email        String         @unique @db.VarChar(100)
  phone_number String?        @db.VarChar(20)
  created_at   DateTime?      @default(now()) @db.Timestamp(6)
  updated_at   DateTime?      @db.Timestamp(6)
  appointments appointments[]
}

model barbervsbarbershops {
  barber_id     Int
  barbershop_id Int
  barbers       barbers     @relation(fields: [barber_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_barber")
  barbershops   barbershops @relation(fields: [barbershop_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_barbershop")

  @@id([barber_id, barbershop_id])
}

enum haircut_type_enum {
  Haircut
  Beard
  StreaksLightening
  Color
  Eyebrows
  Wax
}
